using Microsoft.AspNetCore.Mvc;
using ContactManagerApp.Models;
using MongoDB.Driver;

namespace ContactManagerApp.Controllers
{
    public class TripController : Controller
    {
        private readonly IMongoCollection<Trip> _trips;

        public TripController(MongoDbContext context)
        {
            _trips = context.Trips;
        }

        // Display the trip log
        public IActionResult Index()
        {
            Console.WriteLine("Index action executed");
            var trips = _trips.Find(trip => true).ToList();
            return View(trips);
        }

        // Step 1: Add destination and dates
        [HttpGet]
        public IActionResult AddStep1()
        {
            Console.WriteLine("AddStep1 GET action executed");
            ViewData["Subhead"] = "Add Trip Destination and Dates";
            return View();
        }

        [HttpPost]
        public IActionResult AddStep1(Trip trip)
        {
            Console.WriteLine("AddStep1 POST action executed.");
            
            // Remove Id from validation since it will be generated by MongoDB
            ModelState.Remove("Id");
            
            if (ModelState.IsValid)
            {
                Console.WriteLine($"Form data: Destination={trip.Destination}, StartDate={trip.StartDate}");
                
                // Ensure Id is null so MongoDB can generate it
                trip.Id = null;
                
                // Save the trip data to TempData
                TempData["Trip"] = System.Text.Json.JsonSerializer.Serialize(trip);
                Console.WriteLine("Data saved to TempData");
                
                // Redirect based on whether accommodation was provided
                if (!string.IsNullOrEmpty(trip.Accommodation))
                {
                    Console.WriteLine("Redirecting to AddStep2");
                    return RedirectToAction("AddStep2");
                }
                else
                {
                    Console.WriteLine("Redirecting to AddStep3");
                    return RedirectToAction("AddStep3");
                }
            }
            
            // If we get here, there was a validation error
            Console.WriteLine("Model validation failed");
            foreach (var entry in ModelState)
            {
                if (entry.Value.Errors.Count > 0)
                {
                    Console.WriteLine($"Error in {entry.Key}: {entry.Value.Errors[0].ErrorMessage}");
                }
            }
            
            return View(trip);
        }

        // Step 2: Add accommodation details
        [HttpGet]
        public IActionResult AddStep2()
        {
            Console.WriteLine("AddStep2 GET action executed");
            
            if (TempData["Trip"] == null)
            {
                Console.WriteLine("TempData is null in AddStep2");
                return RedirectToAction("AddStep1");
            }
            
            try
            {
                var tripJson = TempData["Trip"].ToString();
                Console.WriteLine($"Trip data from TempData: {tripJson}");
                
                var trip = System.Text.Json.JsonSerializer.Deserialize<Trip>(tripJson);
                TempData.Keep("Trip");
                
                ViewData["Subhead"] = $"Add Info for {trip.Accommodation}";
                return View(trip);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in AddStep2: {ex.Message}");
                return RedirectToAction("AddStep1");
            }
        }

        [HttpPost]
        public IActionResult AddStep2(Trip tripData)
        {
            Console.WriteLine("AddStep2 POST action executed");
            
            if (TempData["Trip"] == null)
            {
                Console.WriteLine("TempData is null in AddStep2 POST");
                return RedirectToAction("AddStep1");
            }
            
            try
            {
                var trip = System.Text.Json.JsonSerializer.Deserialize<Trip>(TempData["Trip"].ToString());
                
                // Update only the accommodation details
                trip.AccommodationPhone = tripData.AccommodationPhone;
                trip.AccommodationEmail = tripData.AccommodationEmail;
                
                // Save back to TempData
                TempData["Trip"] = System.Text.Json.JsonSerializer.Serialize(trip);
                Console.WriteLine("Updated data saved to TempData");
                
                Console.WriteLine("Redirecting to AddStep3");
                return RedirectToAction("AddStep3");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in AddStep2 POST: {ex.Message}");
                return RedirectToAction("AddStep1");
            }
        }

        // Step 3: Add things to do
        [HttpGet]
        public IActionResult AddStep3()
        {
            Console.WriteLine("AddStep3 GET action executed");
            
            if (TempData["Trip"] == null)
            {
                Console.WriteLine("TempData is null in AddStep3");
                return RedirectToAction("AddStep1");
            }
            
            try
            {
                var trip = System.Text.Json.JsonSerializer.Deserialize<Trip>(TempData["Trip"].ToString());
                TempData.Keep("Trip");
                
                ViewData["Subhead"] = $"Add Things To Do in {trip.Destination}";
                return View(trip);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in AddStep3 GET: {ex.Message}");
                return RedirectToAction("AddStep1");
            }
        }

        [HttpPost]
        public IActionResult AddStep3(Trip tripData)
        {
            Console.WriteLine("AddStep3 POST action executed");
            
            if (TempData["Trip"] == null)
            {
                Console.WriteLine("TempData is null in AddStep3 POST");
                return RedirectToAction("AddStep1");
            }
            
            try
            {
                var tripJson = TempData["Trip"].ToString();
                Console.WriteLine($"Trip data from TempData: {tripJson}");
                
                var trip = System.Text.Json.JsonSerializer.Deserialize<Trip>(tripJson);
                
                // Update with new data
                trip.ThingToDo1 = tripData.ThingToDo1;
                trip.ThingToDo2 = tripData.ThingToDo2;
                trip.ThingToDo3 = tripData.ThingToDo3;
                
                // Important: Set Id to null to ensure MongoDB generates a new ID
                trip.Id = null;
                
                Console.WriteLine("Inserting trip into MongoDB");
                Console.WriteLine($"Trip data: Destination={trip.Destination}, StartDate={trip.StartDate}");
                
                // Insert into MongoDB
                _trips.InsertOne(trip);
                Console.WriteLine("Successfully inserted trip into MongoDB");
                
                // Clear TempData and redirect
                TempData.Clear();
                TempData["Message"] = $"Trip to {trip.Destination} added.";
                return RedirectToAction("Index");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in AddStep3 POST: {ex.Message}");
                Console.WriteLine($"Stack trace: {ex.StackTrace}");
                TempData["Error"] = $"Failed to save trip: {ex.Message}";
                return RedirectToAction("AddStep3");
            }
        }

        // Cancel the form
        public IActionResult Cancel()
        {
            Console.WriteLine("Cancel action executed");
            TempData.Clear();
            return RedirectToAction("Index");
        }
        
        public IActionResult TestMongoConnection()
        {
            try
            {
                // Check if the Trips collection is accessible
                var count = _trips.CountDocuments(trip => true);
                return Content($"MongoDB connection is working. Trips count: {count}");
            }
            catch (Exception ex)
            {
                return Content($"MongoDB connection failed: {ex.Message}");
            }
        }
    }
}